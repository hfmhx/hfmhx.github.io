<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>滕王阁序</title>
    <url>/2021/02/21/%E6%BB%95%E7%8E%8B%E9%98%81%E5%BA%8F/</url>
    <content><![CDATA[<p>【作者】王勃 【朝代】唐</p>
<p>豫章故郡，洪都新府。星分翼轸，地接衡庐。襟三江而带五湖，控蛮荆而引瓯越。物华天宝，龙光射牛斗之墟；人杰地灵，徐孺下陈蕃之榻。雄州雾列，俊采星驰。台隍枕夷夏之交，宾主尽东南之美。都督阎公之雅望，棨戟遥临；宇文新州之懿范，襜帷暂驻。十旬休假，胜友如云；千里逢迎，高朋满座。腾蛟起凤，孟学士之词宗；紫电青霜，王将军之武库。家君作宰，路出名区；童子何知，躬逢胜饯。</p>
<p>时维九月，序属三秋。潦水尽而寒潭清，烟光凝而暮山紫。俨骖騑于上路，访风景于崇阿；临帝子之长洲，得天人之旧馆。层峦耸翠，上出重霄；飞阁流丹，下临无地。鹤汀凫渚，穷岛屿之萦回；桂殿兰宫，即冈峦之体势。</p>
<p>披绣闼，俯雕甍，山原旷其盈视，川泽纡其骇瞩。闾阎扑地，钟鸣鼎食之家；舸舰弥津，青雀黄龙之舳。云销雨霁，彩彻区明。落霞与孤鹜齐飞，秋水共长天一色。渔舟唱晚，响穷彭蠡之滨；雁阵惊寒，声断衡阳之浦。</p>
<p>遥襟甫畅，逸兴遄飞。爽籁发而清风生，纤歌凝而白云遏。睢园绿竹，气凌彭泽之樽；邺水朱华，光照临川之笔。四美具，二难并。穷睇眄于中天，极娱游于暇日。天高地迥，觉宇宙之无穷；兴尽悲来，识盈虚之有数。望长安于日下，目吴会于云间。地势极而南溟深，天柱高而北辰远。关山难越，谁悲失路之人？萍水相逢，尽是他乡之客。怀帝阍而不见，奉宣室以何年？</p>
<p>嗟乎！时运不齐，命途多舛。冯唐易老，李广难封。屈贾谊于长沙，非无圣主；窜梁鸿于海曲，岂乏明时？所赖君子见机，达人知命。老当益壮，宁移白首之心？穷且益坚，不坠青云之志。酌贪泉而觉爽，处涸辙以犹欢。北海虽赊，扶摇可接；东隅已逝，桑榆非晚。孟尝高洁，空余报国之情；阮籍猖狂，岂效穷途之哭！</p>
<p>勃，三尺微命，一介书生。无路请缨，等终军之弱冠；有怀投笔，慕宗悫之长风。舍簪笏于百龄，奉晨昏于万里。非谢家之宝树，接孟氏之芳邻。他日趋庭，叨陪鲤对；今兹捧袂，喜托龙门。杨意不逢，抚凌云而自惜；钟期既遇，奏流水以何惭？</p>
<p>呜乎！胜地不常，盛筵难再；兰亭已矣，梓泽丘墟。临别赠言，幸承恩于伟饯；登高作赋，是所望于群公。敢竭鄙怀，恭疏短引；一言均赋，四韵俱成。请洒潘江，各倾陆海云尔：</p>
<p>滕王高阁临江渚，佩玉鸣鸾罢歌舞。</p>
<p>画栋朝飞南浦云，珠帘暮卷西山雨。</p>
<p>闲云潭影日悠悠，物换星移几度秋。</p>
<p>阁中帝子今何在？槛外长江空自流。</p>
]]></content>
      <categories>
        <category>诗词</category>
      </categories>
      <tags>
        <tag>骈文</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是数字签名</title>
    <url>/2021/02/22/%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D/</url>
    <content><![CDATA[<h1 id="什么是数字签名"><a href="#什么是数字签名" class="headerlink" title="什么是数字签名"></a>什么是数字签名</h1><p>一篇好文《<a href="http://www.youdzone.com/signature.html">What is a Digital Signature?</a>》</p>
<p>中文<a href="http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html">译文</a></p>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
        <tag>数字签名</tag>
      </tags>
  </entry>
  <entry>
    <title>BTC白皮书</title>
    <url>/2021/02/22/BTC%E7%99%BD%E7%9A%AE%E4%B9%A6/</url>
    <content><![CDATA[<p>比特币中文<a href="https://www.8btc.com/wiki/bitcoin-a-peer-to-peer-electronic-cash-system">白皮书</a></p>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
        <tag>BTC</tag>
        <tag>白皮书</tag>
      </tags>
  </entry>
  <entry>
    <title>Ethereum白皮书</title>
    <url>/2021/02/22/Ethereum%E7%99%BD%E7%9A%AE%E4%B9%A6/</url>
    <content><![CDATA[<p><a href="https://github.com/ethereum/wiki/wiki/[%E4%B8%AD%E6%96%87]-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%99%BD%E7%9A%AE%E4%B9%A6">Ethereum中文白皮书</a></p>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
        <tag>白皮书</tag>
        <tag>Ethereum</tag>
      </tags>
  </entry>
  <entry>
    <title>共识机制</title>
    <url>/2021/02/22/%E5%85%B1%E8%AF%86%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="共识机制"><a href="#共识机制" class="headerlink" title="共识机制"></a>共识机制</h1><p>摘抄自文章</p>
<p><a href="https://www.sohu.com/a/240144324_500634">完整解析：什么是共识机制</a> </p>
<p><a href="https://blog.csdn.net/q282176713/article/details/81287144">浅谈共识机制</a></p>
<p><a href="http://www.elecfans.com/blockchain/807619.html">什么是共识机制为什么区块链需要共识机制</a></p>
<p><a href="https://www.cnblogs.com/studyzy/p/8849818.html">区块链共识机制的演进</a></p>
<h3 id="FLP不可能原理和CAP原理"><a href="#FLP不可能原理和CAP原理" class="headerlink" title="FLP不可能原理和CAP原理"></a>FLP不可能原理和CAP原理</h3><p>FLP 不可能原理（FLP impossibility）：在网络可靠，存在节点失效（即便只有一个）的最小化异步模型系统中，不存在一个可以解决一致性问题的确定性算法。1985年 FLP 原理实际上说明对于允许节点失效情况下，纯粹异步系统无法确保一致性在有限时间内完成。 科学告诉你什么是不可能的；工程则告诉你，付出一些代价，我可以把它变成可能。</p>
<p>CAP 原理最早由 Eric Brewer 在 2000 年，ACM 组织的一个研讨会上提出猜想，后来 Lynch 等人进行了证明。</p>
<p>分布式计算系统不可能同时确保一致性（Consistency）、可用性（Availability）和分区容忍性（Partition），设计中往往需要弱化对某个特性的保证。</p>
<ul>
<li>一致性（Consistency）：任何操作应该都是原子的，发生在后面的事件能看到前面事件发生导致的结果，注意这里指的是强一致性；</li>
<li>可用性（Availability）：在有限时间内，任何非失败节点都能应答请求；</li>
<li>分区容忍性（Partition）：网络可能发生分区，即节点之间的通信不可保障。</li>
</ul>
<p><strong>弱化一致性</strong><br>对结果一致性不敏感的应用，可以允许在新版本上线后过一段时间才更新成功，期间不保证一致性。<br>例如网站静态页面内容、实时性较弱的查询类数据库等，CouchDB、Cassandra 等为此设计。<br><strong>弱化可用性</strong><br>对结果一致性很敏感的应用，例如银行取款机，当系统故障时候会拒绝服务。MongoDB、Redis 等为此设计。<br>Paxos、Raft 等算法，主要处理这种情况。<br><strong>弱化分区容忍性</strong><br>现实中，网络分区出现概率减小，但较难避免。某些关系型数据库、ZooKeeper 即为此设计。<br>实践中，网络通过双通道等机制增强可靠性，达到高稳定的网络通信。</p>
<h2 id="为什么区块链需要共识机制"><a href="#为什么区块链需要共识机制" class="headerlink" title="为什么区块链需要共识机制"></a>为什么区块链需要共识机制</h2><p>由于加密货币多数采用去中心化的区块链设计，节点是各处分散且平行的，所以必须设计一套制度，来维护系统的运作顺序与公平性。</p>
<p>当多个主机通过异步通讯方式组成网络集群时，这种异步网络默认是不可靠的，那么在这些不可靠主机之间复制状态需要采取一种机制，以保证每个主机的状态最终达成相同一致性状态，取得共识。</p>
<p>为什么认为异步网络默认是不可靠的？这是根据FLP原理。Impossibility of Distributed Consensus with One Faulty Process一文提出：在一个异步系统中我们不可能确切知道任何一台主机是否死机了，因为我们无法分清楚主机或网络的性能减慢与主机死机的区别，也就是说我们无法可靠地侦测到失败错误。但是，我们还必须确保安全可靠。</p>
<p>达成共识越分散的过程，其效率就越低，但满意度越高，因此也越稳定；相反，达成共识越集中的过程，效率越高，也越容易出现独裁和腐败现象。</p>
<p>达成共识常用的一种方法就是通过物质上的激励以对某个事件达成共识；但是这种共识存在的问题就是容易被外界其它更大的物质激励所破坏。</p>
<p>还有一种就是群体中的个体按照符合自身利益或整个群体利益的方向来对某个事件自发地达成共识；当然形成这种自发式的以维护群体利益为核心的共识过程还是需要时间和环境因素的，但是一旦达成这样的共识趋势，其共识结果也越稳定，越不容易被破坏。</p>
<h2 id="共识机制是什么"><a href="#共识机制是什么" class="headerlink" title="共识机制是什么"></a>共识机制是什么</h2><p>共识机制解决了区块链如何在分布式场景下达成一致性的问题。</p>
<p>统一区块链的版本，并奖励提供资源、维护区块链的使用者，以及惩罚恶意的危害者。这样的制度，必须依赖某种方式来证明，是由谁取得了一个区块链的打包权（或称记帐权），并且可以获取打包这一个区块的奖励，又或者是谁意图进行危害，就会获得一定的惩罚，这就是共识机制。</p>
<h2 id="共识机制的基本要求和不可能三角"><a href="#共识机制的基本要求和不可能三角" class="headerlink" title="共识机制的基本要求和不可能三角"></a>共识机制的基本要求和不可能三角</h2><p>任何分布式系统（包括比特币甚至货币），都存在一个不可能三角形：性能、可扩展性和去中心化。</p>
<p>譬如美元，性能和可扩展性很高（每天无数人用它来交易），但是去中心化低（央行想印多少就印多少）。对于比特币，去中心化程度高，可扩展性也高，但是性能低。</p>
<p>所以在设计、选择共识机制时候，我们必须记住这三点：我们应该优化哪一方面，牺牲哪一方面，因为你不可能同时达到这三点。另外，所有的共识算法必须具备三个基本要求：</p>
<ul>
<li><p>一致性 （safety）：所有参与共识的诚实的节点，得到的计算结果是相同的，而且是符合共识协议的。</p>
</li>
<li><p>终局性 （liveness）：所有参与共识的诚实的节点，最终可以达成一致性结果。</p>
</li>
<li><p>容错性 （fault tolerance）：在共识算法的成功执行过程中，可以容许参与共识的节点发生一些错误。</p>
</li>
</ul>
<h2 id="共识机制的发展历程"><a href="#共识机制的发展历程" class="headerlink" title="共识机制的发展历程"></a>共识机制的发展历程</h2><p>首先，交易发起方构造交易，加上数字签名，广播到区块链P2P网络之中。然后， 区块链网络中的“矿工”节点陆续收到这笔交易。然后，所有矿工都会把交易打包到自己构建的备选区块之中，然后将自己的备选区块广播。</p>
<p>这时候，全网根据”共识机制“来决定哪个矿工负责写入这个区块。然后这个矿工将会负责把这个区块添加到区块链上，完成该区块中的所有交易。最后交易完成，交易参与方可以查询到交易执行结果。</p>
<p>那么， “共识机制”是从什么时候出现的？</p>
<p>1982年， Lamport首次发表了关于拜占庭将军问题解决方案的论文，后来获得了计算机界的最高奖：图灵奖。</p>
<p>1999年，Jakobsson发表了关于PoW的论文。</p>
<p>2008年11月，中本聪发表了比特币的论文，并用了PoW作为共识机制。</p>
<p>2012年，PeerCoin项目开始采用PoS作为共识机制。</p>
<p>2016年，Tendermint项目开始采用PBFT作为公示机制。</p>
<p>2018年，以太坊项目提出在2.0版本中，通过Casper方法采用PoS作为共识机制。实际上，V神今天正在欧洲介绍这方面的最新进展。</p>
<h2 id="几种共识机制介绍"><a href="#几种共识机制介绍" class="headerlink" title="几种共识机制介绍"></a>几种共识机制介绍</h2><h3 id="POW（工作量证明）"><a href="#POW（工作量证明）" class="headerlink" title="POW（工作量证明）"></a>POW（工作量证明）</h3><p>如上所述，为了鼓励人们主动记账，中本聪决定给记账的人发奖励，这就是“比特币”的由来。而记账的人就是“矿工”。</p>
<p>由于不同的“矿工”都希望获得记账权，为了给每个区块选择一个全网认可的“矿工”，就需要 “矿工”给出一个证明，就是所谓“工作量证明”， 选出的矿工可以获得特定数量比特币作为奖励。</p>
<p>奖励数量以每四年减一半的速度递减，矿工的收益的另一部分来自于每笔交易产生的手续费，到2140年无币可奖励的时候，矿工的奖励将全部来自于交易的手续费。</p>
<p>现在关键来了，工作量证明是什么意思？</p>
<p>还是以乒乓球比赛为例。如果有一个人来计分，我们会希望他们不能太慢，但是也不能太快。太慢的话，会积累很多比分要记录，最后大家都要等他们。太快的话，会干扰我们的正常比赛。大家比赛中间要停下来，跟他们谈话，这个效率很低。</p>
<p>为了保证节点之间的同步，新区块的添加速度不能太快。区块链的发明者中本聪故意让添加新区块变得很困难。只有通过极其大量的计算，才能找到一个随机值，使得区块的哈希值符合一定的条件。这个过程就叫做挖矿（Mining）。</p>
<p>“矿工” 的工作其实就是猜出这个随机项的值，使得区块的哈希值可以小于目标值，从而能够写入区块链。这个随机项的值，必须通过穷举计算来获得，也就是说，所有的矿工（计算机）必须反复不停地尝试从0开始的所有整数，直到他们找到这个随机值（nounce）。找到了，他们就发财了。</p>
<p>举个简单的比喻，“挖矿” 的过程其实类似于打麻将， 四方最后有一方凑出了胡牌的牌型，就当与生成了一个达到要求的区块哈希值，胡牌的人就成了 “矿工”，得到相应的奖赏（比特币）。胡完一牌，就是一个区块生成，所以当前交易记录在内。</p>
<p>然后大家接着下一局，继续凑胡牌牌型。如果一局没有人胡牌，也就是大家花了时间，但是没有生成区块，就重新开局。如果投入的时间/资源，小于获得的奖赏，这个矿工就亏了。但是，如果有人摸了两把就胡牌了，相当于很快就找到了这个哈希值， 这个矿工就大赚了。</p>
<p>这样，全世界成千上万台“矿机”们，都在不眠不休地计算中本聪出的这道数学题，为获得奖励的比特币而“废寝忘食”，这就是工作量证明的原理。</p>
<p>具体来说，工作量证明（PoW） 或者说挖矿算法，目的就是寻找一个特殊的数字（nounce），使得哈希值（即SHA256 函数）的输出字符串的前n位是零。</p>
<p>所以，通过POW，我们可以找到一个矿工。但是网络上有那么多的节点，怎么确保所有节点都使用同一个区块链呢？</p>
<p>中本聪为此提出了著名的一致性判别方法：如果一个节点的区块链与另外一个节点的不同，这就意味着冲突。解决这个问题的办法就是，“最长的有效的链”应当获得认可。换句话说，网络上最长的链就是事实上的标准链。</p>
<p>利用这种算法，我们可以在我们网络中的所有节点中达成共识。PoW的本质，是选择计算量最大的链条最为主链条。这样，即使有人恶意破坏，也要付出大量的经济成本，达到不可承受的程度。</p>
<p>举个例子，如果你去一个医院柜台排队，有好几条队，你应该选择哪一条？按照中本聪的规则，你应该派最长的那条队，因为里面的人排得最久，所以最不容易被保安驱散。</p>
<p>也就是说，这套机制会找出最长的一条队伍是合法的，奖励其中排得久的人，并让不合法的分叉队伍重新排队。只要大部分人不傻，就会自觉在最长的队伍上排队。</p>
<p>PoW的优点</p>
<ul>
<li><p>架构清晰，有效可靠。</p>
</li>
<li><p>要获得多数节点的认可，攻击者必须投入超过51%的计算量，才能保证篡改结果。</p>
</li>
<li><p>公平：这种机制类似于多劳多得，干的多，收获也多。</p>
</li>
</ul>
<p>PoW的缺点</p>
<ul>
<li><p>数据冗余：所有数据都要在所有节点备份一遍。</p>
</li>
<li><p>消耗能源：现在挖矿占到了全球0.13%的电力消耗。挖掘一枚比特币，相当于一辆汽车驾驶20万公里的碳排放量。</p>
</li>
<li><p>信息网络延迟：区块链，每10分钟才能生成一个区块，完成其中的交易，以太坊略有提高，每秒交易在几百笔以内，相比之下，阿里巴巴双11的交易速度是31.5万笔/秒。</p>
</li>
<li><p>算力垄断：有些拥有大量算力的公司，譬如比特大陆，实际上已经拥有了某些公链或者dApp超过51%的算力，可以篡改结果，这样就与加密货币或者中本聪的去中心化背道而驰。</p>
</li>
</ul>
<h3 id="POS（权益证明）"><a href="#POS（权益证明）" class="headerlink" title="POS（权益证明）"></a>POS（权益证明）</h3><p>PoS即权益证明，最早由Sunny King于2012年创立的PPC（点点币）采用，它可以解决上面提到的浪费算力的问题。</p>
<p>简单来说，它选举矿工的规则是：谁有钱谁更有可能获得挖矿权。也就是说，挖矿成功的概率与矿工持有的代币数量成正比。</p>
<p>回到乒乓球比赛的例子，也就是谁比分最高，让谁来记，这样鼓励积极比赛的人。</p>
<p>这样的好处：</p>
<ul>
<li><p>不需要算题，所以节约能源。</p>
</li>
<li><p>攻击者需要更高的成本，因为他需要购买大量的代币才能获得51%的篡改权。</p>
</li>
</ul>
<p>缺点是：</p>
<ul>
<li><p>因为持有量越多的人获得的奖励越多，变成了资源垄断，富者越富，穷者越穷。</p>
</li>
<li><p>因为挖矿权跟持有的货币成正比，所以就类似于利息高的情况下，大家就不愿意花钱，而把钱都存银行一样，这样会变成所谓的”屯币“，降低代币的流通性。</p>
</li>
</ul>
<p>采用PoS机制的项目目前来说，主要是以太坊2.0（将要推出）、PIVX和NAVCOIN这几个项目。</p>
<h3 id="DPOS（代表权益证明）"><a href="#DPOS（代表权益证明）" class="headerlink" title="DPOS（代表权益证明）"></a>DPOS（代表权益证明）</h3><p>DPOS（DELEGATED POS）是POW的一个分类，就是代表制POS。也就是说，我的钱少但是我也要获得挖矿权，怎么办，我委托一个代表来做这个事。</p>
<p>以EOS为例，它在全球选出了21个超级节点，所有用户可以投票决定这些节点，也可以投票废弃、更换这些节点。</p>
<p>这样做的好处是：</p>
<ul>
<li><p>不需要耗费能源和硬件。</p>
</li>
<li><p>缩短了区块确认时间（超级节点可以负责），提高了效率。</p>
</li>
<li><p>不需要挖矿，也不需要完全验证，只需要部分见证节点验证，简单、高效。</p>
</li>
</ul>
<p>但是问题也很明显：</p>
<ul>
<li><p>这已经不是去中心化，而是完全的中心化了。</p>
</li>
<li><p>节点选举过程存在巨大的人为操作空间。</p>
</li>
</ul>
<h3 id="PBFT（实用拜占庭容错）"><a href="#PBFT（实用拜占庭容错）" class="headerlink" title="PBFT（实用拜占庭容错）"></a>PBFT（实用拜占庭容错）</h3><p>实用拜占庭将军问题解法（PBFT），这个机制跟前面两种都不一样，也就是说，我不需要矿工，我也不需要挖矿。</p>
<p>我通过周围的人，来判断我记录的账本对不对就行了。也就是说，一个人打完一场比赛以后，我们全部50桌都记录一遍。</p>
<p>那么怎么判断我记录的对不对？我问我身边的几桌，譬如我周围有四桌，如果三桌都说结果是王二战胜李四，那么即使第四个桌说王二输给李四了，我也不用担心，我知道肯定结果就是王二战胜李四。</p>
<p>所以听起来很玄乎的拜占庭将军问题，就是这么简单的一回事。如果你周围有四个人，你问他们今天路上堵不堵车。如果三个人说堵车，另外一个人说不堵车。你就可以确认，路上是堵车的，也就是达成一致意见。</p>
<p>但是注意，达成一致意见，并不意味着意见是正确的。有可能这三个人合起伙来骗你，那么这种情况下，也是达成一致，只不过一致的结论实际上是错误的。拜占庭算法只解决是否能达成一致意见的问题，不考虑意见是否正确。</p>
<p>具体来说，就是在一个分布式系统中，在N≥3F+1的情况下，一致性是可能实现的（N为计算机总数，F为有问题的计算机总数）。信息在计算机间互相交换后，各计算机列出所有得到的信息，以大多数的结果作为解决办法。</p>
<p>PBFT的优点：它不需要矿工，不需要确认，节约能源。</p>
<p>但是缺点是：这种模式需要节点之间进行大量可靠的网络通信（就是我不停地要问周围的乒乓球桌，比分是多少，设想一下有50桌、500桌、5000桌的情况，这个通信强度呈指数级增加）。因此，这种方法只适用于一小群节点，譬如联盟链。</p>
<h3 id="Filecoin的混合共识机制"><a href="#Filecoin的混合共识机制" class="headerlink" title="Filecoin的混合共识机制"></a>Filecoin的混合共识机制</h3><p>Filecoin采用混合共识机制——复制证明（PoRep）+时空证明（PoSt）+ 预期共识(EC)，其中复制证明是共识机制中的核心因素，尽管Filecoin的网络协议、共识、其他算法都基本定型，但是复制证明仍然处于不断完善的方案中。</p>
<p>复制证明（PoRep）是一个交互式证明系统。在这个系统中，存储的提供者需要提供可公开验证的证明，来表明其为一个数据文件副本分配了独有的空间资源，而且所存储的数据是可检索的。</p>
<p>复制证明是新的 PoS存储证明（Proof-of-Storage），PoRep必须能够防范以下三种常见的攻击方式：女巫攻击，外包攻击和生成攻击，他们的共同特点是攻击矿工实际存储的数据大小要比声称存储的数据小，这样攻击矿工就能获得本不该他获得的报酬。</p>
<ul>
<li><p>女巫攻击（Sybil Attack）：利用n个身份，承诺存储n份数据D，而实际上存储小于n份（比如1份），但是却提供了n份存储证明，攻击成功。</p>
</li>
<li><p>外包攻击（Outsourcing Attack）：当攻击者矿工收到检验者要求提供数据D的证明的时候，攻击者矿工从别的矿工那里生成证明，证明自己一直存储了数据D，而实际上没有存储，攻击成功。</p>
</li>
<li><p>生成攻击（Generation Attack）：攻击者A可以使用某种方式生成数据D，当检验者验证的时候，攻击者A就可以重新生成数据D来完成存储证明，攻击成功。</p>
</li>
</ul>
<p><strong>防范生成攻击比较困难，所有的PoS协议都会遇到这样的问题，如何保证矿工真正的存储了这些数据，PoRep需要解决这个问题。</strong></p>
<p><strong>因此，Filecoin协议采用一种叫做 RepGame 的游戏来一起解决这三种攻击方式，PoRes还在此基础上引入了时限性（Time Bounded），PoRes协议的实现可能有很多种方式，不管哪种实现方式都必须能够防止上面的三种攻击方式，并且要能够通过RepGame游戏的测试。</strong></p>
<p>时空证明（PoSt)提出了证明链（proof-chain）的数据结构，证明链把一些的挑战（challenge）和证明（proof）链接起来形成。在证明链的基础上添加上时间段，这样就得到了一段时间内的矿工存储数据的证明，这就是时空证明（Proof of Spacetime，PoSt）。</p>
<p>PoSt可以证明在该段时间内矿工存储了特定的数据，并且利用时间戳锚定这些证明链，这样即使验证者（verifier）不在线，也可以在未来的某个时间内利用时空证明去验证该矿工生成了证明链，PoSt会被提交到链上用来产生新的Block。</p>
<p>预期共识（Expected Consensus，EC）是在每一轮里面选举出来一名或者多名矿工来创建新的区块，矿工赢得选举的可能性跟矿工当前的有效存储（算力）成正比。Filecoin把矿工在网络中的当前存储数据相对于整个网络的存储比例转化为矿工投票权（voting power of the miner）。</p>
<p>无论在该周期里，选举出来的是一名还是多名矿工，被选举出来的矿工都需要创建新的区块，并把新的区块对网络进行广播。</p>
<p><strong>尽管链中的区块是线性的，但是Filecoin的区块数据结构采用的DAG（有向无环图），可以在同一时间产生多个区块，所以Filecoin的交易要比BTC的有效的多，这也是为什么把Filecoin叫做“可能的blockchain 3.0”的原因。</strong></p>
<p><strong>Filecoin首创的混合共识机制，从根本上定义了Filecoin是一个合理高效、去中心化的系统，并体现出Filecoin的公平性、保密性和公开可验证性。</strong></p>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
        <tag>共识机制</tag>
      </tags>
  </entry>
  <entry>
    <title>区块链入门好文记录</title>
    <url>/2021/02/22/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%85%A5%E9%97%A8%E5%A5%BD%E6%96%87%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p><a href="http://www.ruanyifeng.com/blog/2017/12/blockchain-tutorial.html">区块链入门教程</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2018/01/bitcoin-tutorial.html">比特币入门教程</a></p>
<p><a href="https://github.com/liuchengxu/blockchain-tutorial">Blockchain Tutorial</a></p>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
        <tag>BTC</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP的三次握手和四次挥手</title>
    <url>/2021/02/22/TCP%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</url>
    <content><![CDATA[<p><a href="https://www.cnblogs.com/qcrao-2018/p/10182185.html">”三次握手，四次挥手“你真的懂吗</a></p>
]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>TCP</tag>
      </tags>
  </entry>
  <entry>
    <title>Filecoin的gas分析</title>
    <url>/2021/02/26/filecoin%E7%9A%84gas%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="filecoin的gas分析"><a href="#filecoin的gas分析" class="headerlink" title="filecoin的gas分析"></a>filecoin的gas分析</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>filecoin的gas机制是借鉴的EIP1559引入“基本费用”机制</p>
<p><a href="https://filecoin.io/zh-cn/blog/posts/filecoin-eip-1559/">官方的EIP1559介绍</a></p>
<p><a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md">Ethereum Improvement Proposal (EIP) 1559</a></p>
<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><ul>
<li>BaseFee：是网络拥塞情况的度量，可以理解为Gas的市场价格，basefee根据上一个tipset中的所有消息的 GasLimit 的总和进行动态调整。当总 GasLimit 超出某个块的 GasLimit 目标（信号网络拥塞）时，它将增加，而当低于此值时，它将减少，区块链生成的基本信息，以 attoFIL / GasUnit 为单位。</li>
<li>GasLimit：消息发送者可以消耗数量的上限，估计和指定的消息执行量的限制，区块中包含的所有消息的GasLimit之和不得超过BlockGasLimit，由消息发送方在消息总指定，单位是GasUnit</li>
<li><p>GasFeeCap：发送者愿意为每一个 GasUnit 支付的最大令牌数额。消息发送者在发送消息时必须有最小的 GasFeeCap 余额乘以 GasLimit，即使不是所有的余额都会被消耗，由消息发送方在消息中指定，单位是 attoFIL/GasUnit</p>
</li>
<li><p>GasPremium：用于指示当前消息发送方支付给打包方的小费的gas价格，他代表了一种优先权，消息发送方在消息中指定，单位是autoFIL/GasUnit</p>
</li>
<li><p>GasUsed：消息的执行实际消耗的Gas量。当前协议不知道消息在执行之前将确切消耗多少Gas，消息被执行后得出，单位是：GasUnit</p>
</li>
</ul>
<h2 id="Gas消耗说明"><a href="#Gas消耗说明" class="headerlink" title="Gas消耗说明"></a>Gas消耗说明</h2><p>消息上链对资源的消耗体现为Gas的最终消耗，GasUsed乘以BaseFee将被燃烧。从GasFeeCap减去BaseFee将产生GasPremium。GasPremium乘以GasLimit将作为优先费用进入生产矿工的区块。GasLßimit和GasUsage之间的部分差异将作为高估损失而被消耗掉。其余的将返回给消息发送方。</p>
<h3 id="令牌金额"><a href="#令牌金额" class="headerlink" title="令牌金额"></a>令牌金额</h3><p>这是指发送方能发送当前消息所需要的账户余额的最小值，当发送方给出GasFeeCap后其余额需要大于等于GasFeeCap乘以GasLimit的，可以称其为发送这条消的令牌金额，也是这条消息的消耗极限</p>
<script type="math/tex; mode=display">
令牌金额 = GasLimit*GasFeeCap</script><h3 id="基础燃烧费"><a href="#基础燃烧费" class="headerlink" title="基础燃烧费"></a>基础燃烧费</h3><p>因为消息上链要消耗链上的计算、存储等资源，filecoin要求每条消息支付基础的燃烧费用，计算方式如下：</p>
<script type="math/tex; mode=display">
基础燃烧费=BaseFee*GasUsed</script><p>其中发送者需要支付的部分计算如下：</p>
<script type="math/tex; mode=display">
发送方支付的基础燃烧费= \begin{cases} BaseFee*GasUsed, & \text {($BaseFee$ < $GasFeeCap$)} \\ GasFeeCap*GasUsed, & \text{($BaseFee$ > $GasFeeCap$，发送方基础燃烧飞支付不足部分由矿工承担 )} \end{cases}</script><p>矿工如果打包GasFeeCap设置不够燃烧的消息时需要支付，不足燃烧的部分基础费，当前链上还对这个数值由加倍惩罚，目前实际支付为3倍</p>
<script type="math/tex; mode=display">
矿工支付的基础燃烧费=(BaseFee-GasFeeCap)*GasUsed</script><h3 id="矿工手续费"><a href="#矿工手续费" class="headerlink" title="矿工手续费"></a>矿工手续费</h3><p>每一条消息发送方都可以通过设置GasPermium来支付手续费给矿工，以提高消息打包的优先级，矿工手续费计算方式</p>
<script type="math/tex; mode=display">
矿工手续费= \begin{cases} GasPermium*GasLimit, & \text {($BaseFee$ + $GasPermium$ < $GasFeeCap$)} \\ (GasFeeCap-BaseFee)*GasLimit, & \text{($BaseFee$ + $GasPermium$ > $GasFeeCap$)} \end{cases}</script><h3 id="超额燃烧"><a href="#超额燃烧" class="headerlink" title="超额燃烧"></a>超额燃烧</h3><p>超额燃烧是指发送方预估的GasLimit过高的超出GasUsed的部分要被燃烧掉，计算方式如下</p>
<script type="math/tex; mode=display">
GasOverestimation=\begin{cases} GasLimit, & \text {($GasUsed为0$)} \\ 0, & \text{($GasLimit$ < 1.1*$GasUsed$)} \\ (\frac{GasLimit}{GasUsed}-1.1)*(GasLimit-GasUsed) \quad, & \text{($GasLimit$ >= 1.1*$GasUsed$)} \end{cases}</script><h3 id="矿工惩罚"><a href="#矿工惩罚" class="headerlink" title="矿工惩罚"></a>矿工惩罚</h3><p>当矿工打包的消息BaseFee大于GasFeeCap时，矿工会收到惩罚，计算方式如下</p>
<script type="math/tex; mode=display">
MinerPenalty=3*[(BaseFee-GasFeeCap)*GasUsed+GasOverestimation]</script>]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
        <tag>Filecoin</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式学习</title>
    <url>/2021/02/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p>策略模式定义了算法家族，分别封装起来，让他们之间可以相互替换，策略模式让算法的变化不会影响到使用算法的客户。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
</search>
